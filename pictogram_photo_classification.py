# -*- coding: utf-8 -*-
"""pictogram-photo-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WVpneXbd968RrNh3rMIHejqM4jICkydr
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display,HTML
def dhtml(str):
    display(HTML("""<style>
    @import 'https://fonts.googleapis.com/css?family=Smokum&effect=3d';      
    </style><h1 class='font-effect-3d' 
    style='font-family:Smokum; color:#ee6611; font-size:35px;'>
#     %s</h1>"""%str))

dhtml('Code Modules, Functions, & Settings')

import os,numpy as np,pandas as pd
import pylab as pl,seaborn as sn,tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing import image as kimg
from tqdm import tqdm
from IPython.core.magic import register_line_magic
import tensorflow_hub as th
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers as tkl
from tensorflow.keras import callbacks as tkc
from PIL import ImageFile

ImageFile.LOAD_TRUNCATED_IMAGES=True
img_size,img_size2=32,96
classes=['plane','car','bird','cat','deer',
         'dog','frog','horse','ship','truck']
manners=['pictogram','contour','sketch']
objects=['flower','bird','butterfly','tree',
         'plane','crane','dog','horse',
         'deer','truck','car','cat',
         'frog','ship','fish','house']
fpath='../input/art-pictogram/pictograms/'
flist=sorted(os.listdir(fpath))
fw='weights.best.hdf5'
history,model=[],[]
x_train,rx_train,y_train,\
x_test,rx_test,y_test,\
x_valid,rx_valid,y_valid=\
[],[],[],[],[],[],[],[],[]

def img_resize(x):
    global img_size2        
    x=tf.image.resize(x,[img_size2,img_size2])
    return x.numpy()

dhtml('NN Models')

@register_line_magic
def cnn_model(n):
    global history,model,img_size,\
    x_train,y_train,x_test,y_test,x_valid,y_valid
    if n=='1': 
        x_train,y_train=x_train1,y_train1
        x_valid,y_valid=x_valid1,y_valid1
    if n=='2': 
        x_train,y_train=x_train2,y_train2
        x_valid,y_valid=x_valid2,y_valid2
    model=Sequential()
    model.add(tkl.Conv2D(32,(5,5),padding='same',
                         input_shape=x_train.shape[1:]))
    model.add(tkl.Activation('relu'))
    model.add(tkl.MaxPooling2D(pool_size=(2,2)))
    model.add(tkl.Dropout(.25))
    model.add(tkl.Conv2D(196,(5,5)))
    model.add(tkl.Activation('relu'))    
    model.add(tkl.MaxPooling2D(pool_size=(2,2)))
    model.add(tkl.Dropout(.25))
    model.add(tkl.GlobalAveragePooling2D())    
    model.add(tkl.Dense(1024,activation='relu'))
    model.add(tkl.Dropout(.5))         
    model.add(tkl.Dense(10))
    model.add(tkl.Activation('softmax'))
    model.compile(loss='sparse_categorical_crossentropy',
                  optimizer='adam',metrics=['accuracy'])
    early_stopping=tkc.EarlyStopping(monitor='val_loss',
                                     patience=20,verbose=2)
    checkpointer=tkc.ModelCheckpoint(filepath=fw,verbose=2,
                                     save_best_only=True)
    lr_reduction=tkc.ReduceLROnPlateau(monitor='val_loss',verbose=2,
                                       patience=5,factor=.8)
    history=model.fit(x_train,y_train,epochs=100,
                      batch_size=64,verbose=2,
                      validation_data=(x_valid,y_valid),
                      callbacks=[checkpointer,
                                 early_stopping,
                                 lr_reduction])

@register_line_magic
def hub_model(n):
    global history,model,img_size2,\
    rx_train,y_train,rx_test,y_test,rx_valid,y_valid
    if n=='1': 
        rx_train,y_train=rx_train1,y_train1
        rx_valid,y_valid=rx_valid1,y_valid1
    if n=='2': 
        rx_train,y_train=rx_train2,y_train2
        rx_valid,y_valid=rx_valid2,y_valid2
    handle_base="mobilenet_v2_050_96"
    mhandle="https://tfhub.dev/google/imagenet/{}/feature_vector/4"\
    .format(handle_base)
    model=tf.keras.Sequential([
        tf.keras.layers.Input((img_size2,img_size2,3),
                              name='input'),
        th.KerasLayer(mhandle,trainable=True),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(2048,activation='relu'),
        tf.keras.layers.Dropout(rate=.5),
        tf.keras.layers.Dense(10,activation='softmax')])
    model.compile(optimizer='adam',metrics=['accuracy'],
                  loss='sparse_categorical_crossentropy') 
    early_stopping=tkc.EarlyStopping(monitor='val_loss',
                                     patience=20,verbose=2)
    checkpointer=tkc.ModelCheckpoint(filepath=fw,verbose=2,
                                     save_best_only=True)
    lr_reduction=tkc.ReduceLROnPlateau(monitor='val_loss',verbose=2,
                                       patience=5,factor=.8)
    history=model.fit(rx_train,y_train,epochs=50,
                      batch_size=64,verbose=2,
                      validation_data=(rx_valid,y_valid),
                      callbacks=[checkpointer,
                                 early_stopping,
                                 lr_reduction])

def history_plot(fit_history):
    pl.figure(figsize=(10,10)); pl.subplot(211)
    keys=list(fit_history.history.keys())[0:4]
    pl.plot(fit_history.history[keys[0]],
            color='slategray',label='train')
    pl.plot(fit_history.history[keys[2]],
            color='#ee6611',label='valid')
    pl.xlabel("Epochs"); pl.ylabel("Loss")
    pl.legend(); pl.grid()
    pl.title('Loss Function')     
    pl.subplot(212)
    pl.plot(fit_history.history[keys[1]],
            color='slategray',label='train')
    pl.plot(fit_history.history[keys[3]],
            color='#ee6611',label='valid')
    pl.xlabel("Epochs"); pl.ylabel("Accuracy")    
    pl.legend(); pl.grid()
    pl.title('Accuracy'); pl.show()

dhtml('Pictogram Data')

def path_to_tensor(img_path,fpath):
    img=kimg.load_img(fpath+img_path,
                      target_size=(img_size,img_size))
    x=kimg.img_to_array(img)
    return np.expand_dims(x,axis=0)
def paths_to_tensor(img_paths,fpath):
    tensor_list=[path_to_tensor(img_path,fpath) 
                 for img_path in tqdm(img_paths)]
    return np.vstack(tensor_list)
labels1=np.array([int(el[:2]) for el in flist],
                 dtype='int8')-1
labels2=np.array([int(el[3:6]) for el in flist],
                 dtype='int8')-1
images=np.array(paths_to_tensor(flist,fpath=fpath))/255
n2=len(labels1[labels1==0])
images=images[:n2]; labels2=labels2[:n2]
cond=np.where([l in classes for l in objects])[0]
cond2=np.where([l in cond for l in labels2])
x=images[cond2]; y=labels2[cond2]
rd={1:2,4:0,6:5,7:7,8:4,9:9,10:1,11:3,12:6,13:8}
y=np.array([rd.get(el,el) for el in y],
            dtype='int8')
N=len(y); n=int(.1*N)
shuffle_ids=np.arange(N)
np.random.RandomState(123).shuffle(shuffle_ids)
x,y=x[shuffle_ids],y[shuffle_ids]
x_test1,x_valid1,x_train1=x[:n],x[n:2*n],x[2*n:]
y_test1,y_valid1,y_train1=y[:n],y[n:2*n],y[2*n:]

print([x.shape,x.dtype,y.shape,y.dtype])
print('Label: ',classes[y[100]])
pl.figure(figsize=(1,1))
pl.xticks([]); pl.yticks([])
pl.imshow(x[100]);

# Commented out IPython magic to ensure Python compatibility.
# %cnn_model 1

history_plot(history)

model.load_weights(fw)
model.evaluate(x_test1,y_test1)

rx_train1,rx_test1,rx_valid1=\
img_resize(x_train1),img_resize(x_test1),img_resize(x_valid1)
print([rx_train1.shape,rx_train1.dtype])
print('Label: ',classes[y_valid1[100]])
pl.figure(figsize=(1,1))
pl.xticks([]); pl.yticks([])
pl.imshow(rx_valid1[100]);

# Commented out IPython magic to ensure Python compatibility.
# %hub_model 1

history_plot(history)

model.load_weights(fw)
model.evaluate(rx_test1,y_test1)

dhtml('CIFAR Data')

(x,y),(_,_)=cifar10.load_data()
x2=np.array(x,dtype='float32')/255
y2=y.reshape(-1)
N2=len(y2); n2=int(.1*N2)
shuffle_ids2=np.arange(N2)
np.random.RandomState(234).shuffle(shuffle_ids2)
shuffle_ids2=shuffle_ids2[:N]
x2,y2=x2[shuffle_ids2],y2[shuffle_ids2]
x_test2,x_valid2,x_train2=x2[:n],x2[n:2*n],x2[2*n:]
y_test2,y_valid2,y_train2=y2[:n],y2[n:2*n],y2[2*n:]

print([x2.shape,x2.dtype,y2.shape,y2.dtype])
print('Label: ',classes[y2[100]])
pl.figure(figsize=(1,1))
pl.xticks([]); pl.yticks([])
pl.imshow(x2[100]);

# Commented out IPython magic to ensure Python compatibility.
# %cnn_model 2

history_plot(history)

model.load_weights(fw)
model.evaluate(x_test2,y_test2)

rx_train2,rx_test2,rx_valid2=\
img_resize(x_train2),img_resize(x_test2),img_resize(x_valid2)
print([x_train2.shape,x_train2.dtype])
print('Label: ',classes[y_valid2[100]])
pl.figure(figsize=(1,1))
pl.xticks([]); pl.yticks([])
pl.imshow(x_valid2[100]);

# Commented out IPython magic to ensure Python compatibility.
# %hub_model 2

history_plot(history)

model.load_weights(fw)
model.evaluate(rx_test2,y_test2)

dhtml('Mixed Data')

x_train=np.vstack([x_train1,x_train2])
x_test=np.vstack([x_test1,x_test2])
x_valid=np.vstack([x_valid1,x_valid2])
y_train=np.hstack([y_train1,y_train2])
y_test=np.hstack([y_test1,y_test2])
y_valid=np.hstack([y_valid1,y_valid2])
for [x,y] in [[x_train,y_train],
              [x_test,y_test],
              [x_valid,y_valid]]:
    N=len(y); shuffle_ids=np.arange(N)
    np.random.RandomState(23).shuffle(shuffle_ids)
    x,y=x[shuffle_ids],y[shuffle_ids]
    print([x.shape,x.dtype,y.shape,y.dtype])

fig=pl.figure(figsize=(10,3))
randch=np.random.choice(x_test.shape[0],
                        size=10,replace=False)
for i,idx in enumerate(randch):
    ax=fig.add_subplot(2,5,i+1,
                       xticks=[],yticks=[])
    ax.imshow(x_test[idx])
    true_idx=y_test[idx]
    ax.set_title(classes[true_idx],color="#ee6611")

# Commented out IPython magic to ensure Python compatibility.
# %cnn_model 0

history_plot(history)

model.load_weights(fw)
model.evaluate(x_test,y_test)

rx_train=np.vstack([rx_train1,rx_train2])
rx_test=np.vstack([rx_test1,rx_test2])
rx_valid=np.vstack([rx_valid1,rx_valid2])
y_train=np.hstack([y_train1,y_train2])
y_test=np.hstack([y_test1,y_test2])
y_valid=np.hstack([y_valid1,y_valid2])
for [x,y] in [[rx_train,y_train],
              [rx_test,y_test],
              [rx_valid,y_valid]]:
    N=len(y); shuffle_ids=np.arange(N)
    np.random.RandomState(23).shuffle(shuffle_ids)
    x,y=x[shuffle_ids],y[shuffle_ids]
    print([x.shape,x.dtype,y.shape,y.dtype])

fig=pl.figure(figsize=(10,3))
randch=np.random.choice(rx_test.shape[0],
                        size=10,replace=False)
for i,idx in enumerate(randch):
    ax=fig.add_subplot(2,5,i+1,
                       xticks=[],yticks=[])
    ax.imshow(rx_test[idx])
    true_idx=y_test[idx]
    ax.set_title(classes[true_idx],color="#ee6611")

# Commented out IPython magic to ensure Python compatibility.
# %hub_model 0

history_plot(history)

model.load_weights(fw)
model.evaluate(rx_test,y_test)