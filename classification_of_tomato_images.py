# -*- coding: utf-8 -*-
"""classification-of-tomato-images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YQUCsw0jqPT63AIv9z1-PQgMLTuHvBsa

## Code Modules & Functions
"""

import sys
!cp ../input/rapids/rapids.0.16.0 /opt/conda/envs/rapids.tar.gz
!cd /opt/conda/envs/ && tar -xzvf rapids.tar.gz > /dev/null
sys.path=["/opt/conda/envs/rapids/lib/python3.7/site-packages"]+sys.path
sys.path=["/opt/conda/envs/rapids/lib/python3.7"]+sys.path
sys.path=["/opt/conda/envs/rapids/lib"]+sys.path 
!cp /opt/conda/envs/rapids/lib/libxgboost.so /opt/conda/lib/

import warnings; warnings.filterwarnings('ignore')
import pandas as pd,numpy as np,tensorflow as tf
import os,pylab as pl,cudf,cuml
from sklearn.metrics import accuracy_score,hamming_loss
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier as sRFC
from cuml.ensemble import RandomForestClassifier as cRFC
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier as sKNC
from cuml.neighbors import KNeighborsClassifier as cKNC
from sklearn.neural_network import MLPClassifier
import tensorflow.keras.preprocessing.image as tkimg
fpath='../input/tomato-cultivars/'

def images2array(files_path,img_size,grayscale=False):
    files_list=sorted(os.listdir(files_path))
    n,img_array=len(files_list),[]
    for i in range(n):
        if i%round(.1*n)==0:
            print('=>',end='',flush=True)
        img_path=files_path+files_list[i]
        if grayscale:
            img=tkimg.load_img(
                img_path,grayscale=grayscale)
        else:
            img=tkimg.load_img(
                img_path,target_size=(img_size,img_size))
        img=tkimg.img_to_array(img)
        img=np.expand_dims(img,axis=0)/255
        img_array.append(img)
    return np.array(np.vstack(img_array),dtype='float32')

"""## Data"""

names=['Kumato','Beefsteak','Tigerella',
       'Roma','Japanese Black Trifele',
       'Yellow Pear','Sun Gold','Green Zebra',
       'Cherokee Purple','Oxheart','Blue Berries',
       'San Marzano','Banana Legs',
       'German Orange Strawberry','Supersweet 100']
flist=sorted(os.listdir(fpath))
labels=np.array(
    [int(el[:2]) for el in flist],dtype='int32')-1
img_size=160
images=images2array(fpath,img_size)
N=labels.shape[0]; n=int(.2*N)
shuffle_ids=np.arange(N)
np.random.RandomState(12).shuffle(shuffle_ids)
images,labels=images[shuffle_ids],labels[shuffle_ids]
x_test,x_train=images[:n],images[n:]
y_test,y_train=labels[:n],labels[n:]

pd.DataFrame([[x_train.shape,x_test.shape],
              [x_train.dtype,x_test.dtype],
              [y_train.shape,y_test.shape],
              [y_train.dtype,y_test.dtype]],               
             columns=['train','test'])

k=np.random.randint(40)
print('Label: ',y_test[k],
      names[y_test[k]])
pl.figure(figsize=(3,3))
pl.imshow((x_test[k]));

x_train=x_train.reshape(-1,img_size**2*3)
y_train=y_train.reshape(-1,1)
x_test=x_test.reshape(-1,img_size**2*3)
y_test=y_test.reshape(-1,1)

"""## Sklearn Classifiers"""

def classifier_fit_score(classifier,x_train,x_test,y_train,y_test):
    classifier.fit(x_train,y_train)     
    y_clf_train=classifier.predict(x_train)
    y_clf_test=classifier.predict(x_test)        
    acc_clf_train=round(accuracy_score(y_train,y_clf_train),4)
    acc_clf_test=round(accuracy_score(y_test,y_clf_test),4) 
    loss_clf_train=round(hamming_loss(y_train,y_clf_train),4)
    loss_clf_test=round(hamming_loss(y_test,y_clf_test),4)  
    return [y_clf_train,y_clf_test,acc_clf_train,acc_clf_test,
            loss_clf_train,loss_clf_test]

[y_srfc_train,y_srfc_test,acc_srfc_train,
 acc_srfc_test,loss_srfc_train,loss_srfc_test]=\
classifier_fit_score(sRFC(),x_train,x_test,y_train,y_test)
print(classification_report(y_test,y_srfc_test))

#[y_crfc_train,y_crfc_test,acc_crfc_train,
# acc_crfc_test,loss_crfc_train,loss_crfc_test]=\
#classifier_fit_score(cRFC(),x_train,x_test,y_train,y_test)
#print(classification_report(y_test,y_crfc_test))

[y_lsvc_train,y_lsvc_test,acc_lsvc_train,
 acc_lsvc_test,loss_lsvc_train,loss_lsvc_test]=\
classifier_fit_score(svm.LinearSVC(),
                     x_train,x_test,y_train,y_test)
print(classification_report(y_test,y_lsvc_test))

pl.figure(figsize=(10,5)); t=50; x=range(t)
pl.scatter(x,y_test[:t],marker='*',s=400,
           color='#ff355e',label='Real data')
pl.scatter(x,y_srfc_test[:t],marker='v',
           s=100,color='darkorange',label='Random Forest')
pl.scatter(x,y_lsvc_test[:t],marker='s',s=50,
           color='darkred',label='SVM LinearSVC')
pl.xlabel('Observations'); pl.ylabel('Targets') 
pl.title('Classifiers. Test Results')
pl.legend(loc=2,fontsize=10); pl.show()

[y_sknc_train,y_sknc_test,acc_sknc_train,
 acc_sknc_test,loss_sknc_train,loss_sknc_test]=\
classifier_fit_score(sKNC(),x_train,x_test,y_train,y_test)
print(classification_report(y_test,y_sknc_test))

[y_cknc_train,y_cknc_test,acc_cknc_train,
 acc_cknc_test,loss_cknc_train,loss_cknc_test]=\
classifier_fit_score(cKNC(),x_train,x_test,y_train,y_test)
print(classification_report(y_test,y_cknc_test))

mlpc=MLPClassifier(hidden_layer_sizes=(512,),
                   max_iter=60,solver='sgd',
                   verbose=1,random_state=1,
                   learning_rate_init=.005)
[y_mlpc_train,y_mlpc_test,acc_mlpc_train,
 acc_mlpc_test,loss_mlpc_train,loss_mlpc_test]=\
classifier_fit_score(mlpc,x_train,x_test,y_train,y_test)

print(classification_report(y_test,y_mlpc_test))

pl.figure(figsize=(10,5)); t=50; x=range(t)
pl.scatter(x,y_test[:t],marker='*',s=400,
           color='#ff355e',label='Real data')
pl.scatter(x,y_sknc_test[:t],marker='v',
           s=100,color='darkorange',label='KNeighbors')
pl.scatter(x,y_mlpc_test[:t],marker='s',s=50,
           color='darkred',label='MLP')
pl.xlabel('Observations'); pl.ylabel('Targets') 
pl.title('Classifiers. Test Results')
pl.legend(loc=2,fontsize=10); pl.show()

acc_train=[acc_srfc_train,acc_lsvc_train,
           acc_sknc_train,acc_mlpc_train]
acc_test=[acc_srfc_test,acc_lsvc_test,
          acc_sknc_test,acc_mlpc_test]
loss_train=[loss_srfc_train,loss_lsvc_train,
            loss_sknc_train,loss_mlpc_train]
loss_test=[loss_srfc_test,loss_lsvc_test,
           loss_sknc_test,loss_mlpc_test]
cols=['Random Forest','SVM LinearSVC',
      'KNeighbors','MLP']
pd.DataFrame([acc_train,acc_test,
              loss_train,loss_test],
            index=['accuracy train','accuracy test',
                   'loss train','loss test'],
            columns=cols)